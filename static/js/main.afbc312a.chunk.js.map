{"version":3,"sources":["Components/EditableSpan/EditableSpan.module.scss","Components/ErrorSnackbar/ErrorSnackbar.module.scss","api/todolistsAPI.ts","App/appReducer.tsx","utils/errorUtils.ts","Features/Todolists/tasksReducer.ts","Features/Todolists/todolistsReducer.ts","App/store.ts","Components/AddItem/AddItem.tsx","Components/EditableSpan/EditableSpan.tsx","Features/Todolists/Todolist/Task/Task.tsx","Features/Todolists/Todolist/Todolist.tsx","Features/Todolists/TodolistsList .tsx","Components/ErrorSnackbar/ErrorSnackbar.tsx","App/App.tsx","index.tsx","Features/Todolists/Todolist/Todolist.module.scss","Components/AddItem/AddItem.module.scss","Features/Todolists/Todolist/Task/Task.module.scss","App/App.module.scss","Features/Todolists/TodolistsList.module.scss"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","initialState","status","error","setAppStatusAC","type","payload","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskThunk","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","then","res","resultCode","updateTaskAC","catch","v1","rootReducer","combineReducers","state","action","stateCopy","todos","forEach","tl","todoListId","filter","map","entityStatus","todolist","copy","todolists","value","app","store","createStore","applyMiddleware","thunk","window","AddItem","React","memo","callback","disabled","useState","newTaskTitle","setNewTaskTitle","setError","onClickHandler","trim","className","styles","wrapper","TextField","textField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","color","btnAdd","onClick","AddBox","errorMessage","EditableSpan","changeTaskTitle","editMode","setEditMode","setValue","input","autoFocus","newValue","onBlur","onDoubleClick","Task","props","removeTask","checkboxChange","changeTaskTitleHandler","useCallback","Completed","isDone","checked","New","span","trash","Delete","Todolist","changeFilter","addTask","removeTodoList","changeTodoListTitle","useDispatch","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskItem","changeTodolistTitleHandler","tasksForTodoList","useEffect","items","setTasksAC","btnsWrapper","btn","deleteBtn","TodolistsList","useSelector","changeFilterAC","addTodolist","item","addTodolistsThunk","updateTodolistTitleAC","updateTodolistTitleThunk","addTaskAC","addTaskThunk","chandeTaskEntityStatusAC","removeTaskAC","Grid","container","addItem","spacing","Paper","elevation","paper","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","Fragment","AppBar","position","Toolbar","navbar","IconButton","edge","Typography","Button","LinearProgress","progress","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afbc312a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__3c1_L\",\"span\":\"EditableSpan_span__1cdp9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"ErrorSnackbar_message__38d7O\"};","import axios from \"axios\";\r\nimport { RequestStatusType } from \"../App/appReducer\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"api-key\": \"b108fd33-d977-4add-bda9-9da2037bdf7a\",\r\n  },\r\n});\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n  //T-dlist api\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>(`todo-lists`);\r\n  },\r\n  postTodolist(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {\r\n      title: title,\r\n    });\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n  },\r\n  updateTodolist(todolistId: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolistId}`, {\r\n      title: title,\r\n    });\r\n  },\r\n  //Tasks api\r\n  getTasks(todolistId: string) {\r\n    return instance.get<TaskResponseType>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  postTask(todolistId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(\r\n      `todo-lists/${todolistId}/tasks`,\r\n      {\r\n        title: title,\r\n      }\r\n    );\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`\r\n    );\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n    return instance.put<ResponseType<TaskType>>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`,\r\n      model\r\n    );\r\n  },\r\n};\r\n\r\n// Types\r\nexport type TodolistType = {\r\n  id: string;\r\n  addedDate: string;\r\n  order: number;\r\n  title: string;\r\n};\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: D;\r\n};\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n  entityStatus: RequestStatusType;\r\n};\r\nexport type UpdateTaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: number;\r\n  priority: number;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\ntype TaskResponseType = {\r\n  items: TaskType[];\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","export type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n\r\nconst initialState = {\r\n  status: \"idle\" as RequestStatusType,\r\n  error: null as null | string,\r\n};\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionAppTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, status: action.payload.status };\r\n    case \"APP/SET-ERROR\":\r\n      return { ...state, error: action.payload.error };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n  return {\r\n    type: \"APP/SET-STATUS\",\r\n    payload: {\r\n      status,\r\n    },\r\n  } as const;\r\n};\r\nexport const setAppErrorAC = (error: null | string) => {\r\n  return {\r\n    type: \"APP/SET-ERROR\",\r\n    payload: {\r\n      error,\r\n    },\r\n  } as const;\r\n};\r\n\r\n// Types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type ActionAppTypes = SetAppErrorActionType | SetAppStatusActionType;\r\nexport type InitialStateType = typeof initialState;\r\n","import {\r\n  setAppErrorAC,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType,\r\n} from \"./../App/appReducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ResponseType } from \"./../api/todolistsAPI\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(\r\n  data: ResponseType<T>,\r\n  dispatch: ErrorUtilsDispatchType\r\n) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]));\r\n  } else {\r\n    dispatch(setAppErrorAC(\"Some error occurred\"));\r\n  }\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n};\r\n\r\nexport const handleServerNetworkError = (\r\n  error: { message: string },\r\n  dispatch: ErrorUtilsDispatchType\r\n) => {\r\n  dispatch(setAppErrorAC(error.message));\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n};\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<\r\n  SetAppErrorActionType | SetAppStatusActionType\r\n>;\r\n","import { ActionTodolistsTypes, SetTodosType } from \"./todolistsReducer\";\r\nimport { TaskStateType } from \"./TodolistsList \";\r\nimport { TaskType, todolistsAPI, UpdateTaskType } from \"../../api/todolistsAPI\";\r\nimport { AppRootStateType, ThunkType } from \"../../App/store\";\r\nimport { RequestStatusType, setAppStatusAC } from \"../../App/appReducer\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: TaskStateType = {};\r\n\r\nexport const tasksReducer = (\r\n  state = initialState,\r\n  action: ActionTasksTypes\r\n): TaskStateType => {\r\n  switch (action.type) {\r\n    case \"SET_TASKS\": {\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: action.payload.tasks,\r\n      };\r\n    }\r\n    case \"SET_TODOLISTS\": {\r\n      let stateCopy = { ...state };\r\n      action.payload.todos.forEach((tl) => {\r\n        stateCopy[tl.id] = [];\r\n      });\r\n      return stateCopy;\r\n    }\r\n    case \"ADD_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.task.todoListId]: [\r\n          action.payload.task,\r\n          ...state[action.payload.task.todoListId],\r\n        ],\r\n      };\r\n    case \"REMOVE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todoListId]: state[action.payload.todoListId].filter(\r\n          (t) => t.id !== action.payload.taskId\r\n        ),\r\n      };\r\n    case \"TASK/CHANGE_ENTITY_STATUS\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: state[action.payload.todolistId].map((t) =>\r\n          t.id === action.payload.taskId\r\n            ? { ...t, entityStatus: action.payload.entityStatus }\r\n            : t\r\n        ),\r\n      };\r\n    case \"UPDATE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: state[action.payload.todolistId].map((t) =>\r\n          t.id === action.payload.taskId ? { ...t, ...action.payload.model } : t\r\n        ),\r\n      };\r\n\r\n    case \"ADD_TODOLIST\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolist.id]: [],\r\n      };\r\n    case \"REMOVE_TODOLIST\":\r\n      const copy = { ...state };\r\n      delete copy[action.payload.todoListId];\r\n      return copy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action creators\r\nexport const addTaskAC = (task: TaskType) => {\r\n  return {\r\n    type: \"ADD_TASK\",\r\n    payload: {\r\n      task,\r\n    },\r\n  } as const;\r\n};\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n  return {\r\n    type: \"REMOVE_TASK\",\r\n    payload: {\r\n      todoListId,\r\n      taskId,\r\n    },\r\n  } as const;\r\n};\r\nexport const updateTaskAC = (\r\n  taskId: string,\r\n  model: UpdateTaskModelType,\r\n  todolistId: string\r\n) => {\r\n  return {\r\n    type: \"UPDATE_TASK\",\r\n    payload: {\r\n      todolistId,\r\n      taskId,\r\n      model,\r\n    },\r\n  } as const;\r\n};\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => {\r\n  return {\r\n    type: \"SET_TASKS\",\r\n    payload: {\r\n      tasks,\r\n      todolistId,\r\n    },\r\n  } as const;\r\n};\r\nexport const chandeTaskEntityStatusAC = (\r\n  taskId: string,\r\n  todolistId: string,\r\n  entityStatus: RequestStatusType\r\n) => {\r\n  return {\r\n    type: \"TASK/CHANGE_ENTITY_STATUS\",\r\n    payload: {\r\n      taskId,\r\n      todolistId,\r\n      entityStatus,\r\n    },\r\n  } as const;\r\n};\r\n// Thunks\r\nexport const fetchTasksThunk = (todolistId: string): ThunkType => (\r\n  dispatch\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.getTasks(todolistId).then((res) => {\r\n    dispatch(setAppStatusAC(\"succeeded\"));\r\n    const tasks = res.data.items;\r\n    dispatch(setTasksAC(tasks, todolistId));\r\n  });\r\n};\r\n\r\nexport const removeTaskThunk = (\r\n  taskId: string,\r\n  todolistId: string\r\n): ThunkType => (dispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  dispatch(chandeTaskEntityStatusAC(taskId, todolistId, \"loading\"));\r\n  todolistsAPI\r\n    .deleteTask(todolistId, taskId)\r\n    .then((res) => {\r\n      if (res.data.resultCode == 0) {\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n        dispatch(removeTaskAC(taskId, todolistId));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const addTaskThunk = (todolistId: string, title: string): ThunkType => (\r\n  dispatch\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI\r\n    .postTask(todolistId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item;\r\n        dispatch(addTaskAC(task));\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const updateTaskThunk = (\r\n  taskId: string,\r\n  model: UpdateTaskModelType,\r\n  todolistId: string\r\n): ThunkType => (dispatch, getState: () => AppRootStateType) => {\r\n  const allTasksFromState = getState().tasks;\r\n  const tasksForCurrentTodolist = allTasksFromState[todolistId];\r\n  const task = tasksForCurrentTodolist.find((t) => {\r\n    return t.id === taskId;\r\n  });\r\n  if (!task) {\r\n    return;\r\n  }\r\n  const apiModel: UpdateTaskType = {\r\n    title: task.title,\r\n    startDate: task.startDate,\r\n    priority: task.priority,\r\n    description: task.description,\r\n    deadline: task.deadline,\r\n    status: task.status,\r\n    ...model,\r\n  };\r\n  todolistsAPI\r\n    .updateTask(todolistId, taskId, apiModel)\r\n    .then((res) => {\r\n      if (res.data.resultCode == 0) {\r\n        dispatch(updateTaskAC(taskId, model, todolistId));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\n// Types\r\nexport type ActionTasksTypes =\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ActionTodolistsTypes\r\n  | SetTodosType\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof chandeTaskEntityStatusAC>;\r\n\r\ntype UpdateTaskModelType = {\r\n  description?: string;\r\n  title?: string;\r\n  status?: number;\r\n  priority?: number;\r\n  startDate?: string;\r\n  deadline?: string;\r\n};\r\n","import { todolistsAPI, TodolistType } from \"./../../api/todolistsAPI\";\r\nimport { v1 } from \"uuid\";\r\nimport { ThunkType } from \"../../App/store\";\r\nimport {\r\n  RequestStatusType,\r\n  setAppErrorAC,\r\n  setAppStatusAC,\r\n} from \"../../App/appReducer\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from \"../../utils/errorUtils\";\r\n\r\n// For tests\r\nexport const todoListId_1 = v1();\r\nexport const todoListId_2 = v1();\r\n\r\nconst initialState: TodoListEntityType[] = [];\r\n\r\nexport const todolistsReducer = (\r\n  state = initialState,\r\n  action: ActionTodolistsTypes\r\n): TodoListEntityType[] => {\r\n  switch (action.type) {\r\n    case \"CHANGE_FILTER\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.todolistId\r\n          ? { ...tl, filter: action.payload.value }\r\n          : tl\r\n      );\r\n    case \"REMOVE_TODOLIST\":\r\n      return state.filter((tl) => tl.id !== action.payload.todoListId);\r\n    case \"ADD_TODOLIST\":\r\n      return [\r\n        {\r\n          ...action.payload.todolist,\r\n          filter: \"All\",\r\n          entityStatus: \"idle\",\r\n        },\r\n        ...state,\r\n      ];\r\n    case \"UPDATE_TODOLIST_TITLE\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.todolistId\r\n          ? { ...tl, title: action.payload.title }\r\n          : tl\r\n      );\r\n    case \"SET_TODOLISTS\":\r\n      return action.payload.todos.map((tl) => {\r\n        return { ...tl, filter: \"All\", entityStatus: \"idle\" };\r\n      });\r\n    case \"TODOLIST/CHANGE_ENTITY_STATUS\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.id\r\n          ? { ...tl, entityStatus: action.payload.entityStatus }\r\n          : tl\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action creators\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n  return {\r\n    type: \"ADD_TODOLIST\",\r\n    payload: {\r\n      todolist,\r\n    },\r\n  } as const;\r\n};\r\nexport const removeTodolistAC = (todoListId: string) => {\r\n  return {\r\n    type: \"REMOVE_TODOLIST\",\r\n    payload: {\r\n      todoListId,\r\n    },\r\n  } as const;\r\n};\r\nexport const changeFilterAC = (value: FilterValuesType, todolistId: string) => {\r\n  return {\r\n    type: \"CHANGE_FILTER\",\r\n    payload: {\r\n      value,\r\n      todolistId,\r\n    },\r\n  } as const;\r\n};\r\nexport const updateTodolistTitleAC = (todolistId: string, title: string) => {\r\n  return {\r\n    type: \"UPDATE_TODOLIST_TITLE\",\r\n    payload: {\r\n      todolistId,\r\n      title,\r\n    },\r\n  } as const;\r\n};\r\nexport const setTodolistsAC = (todos: TodolistType[]) => {\r\n  return {\r\n    type: \"SET_TODOLISTS\",\r\n    payload: {\r\n      todos,\r\n    },\r\n  } as const;\r\n};\r\nexport const chandeTodolistEntityStatusAC = (\r\n  id: string,\r\n  entityStatus: RequestStatusType\r\n) => {\r\n  return {\r\n    type: \"TODOLIST/CHANGE_ENTITY_STATUS\",\r\n    payload: {\r\n      id,\r\n      entityStatus,\r\n    },\r\n  } as const;\r\n};\r\n\r\n// Thunks\r\n\r\nexport const fetchTodolistsThunk = (): ThunkType => (dispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI\r\n    .getTodolists()\r\n    .then((res) => {\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n      dispatch(setTodolistsAC(res.data));\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const removeTodolistThunk = (todolistId: string): ThunkType => (\r\n  dispatch\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  dispatch(chandeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n  todolistsAPI\r\n    .deleteTodolist(todolistId)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n        dispatch(removeTodolistAC(todolistId));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const addTodolistsThunk = (title: string): ThunkType => (dispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI\r\n    .postTodolist(title)\r\n    .then((res) => {\r\n      if (res.data.resultCode == 0) {\r\n        dispatch(addTodolistAC(res.data.data.item));\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const updateTodolistTitleThunk = (\r\n  todolistId: string,\r\n  title: string\r\n): ThunkType => (dispatch) => {\r\n  todolistsAPI\r\n    .updateTodolist(todolistId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode == 0) {\r\n        dispatch(updateTodolistTitleAC(todolistId, title));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\n// Types\r\nexport type ActionTodolistsTypes =\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof changeFilterAC>\r\n  | ReturnType<typeof updateTodolistTitleAC>\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof chandeTodolistEntityStatusAC>;\r\n\r\nexport type SetTodosType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodoListEntityType = TodolistType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\nexport type FilterValuesType = \"All\" | \"Completed\" | \"Active\";\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk, { ThunkAction } from \"redux-thunk\";\r\nimport {\r\n  ActionTasksTypes,\r\n  tasksReducer,\r\n} from \"../Features/Todolists/tasksReducer\";\r\nimport {\r\n  ActionTodolistsTypes,\r\n  todolistsReducer,\r\n} from \"../Features/Todolists/todolistsReducer\";\r\nimport { ActionAppTypes, appReducer } from \"./appReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type ThunkType = ThunkAction<\r\n  void,\r\n  AppRootStateType,\r\n  unknown,\r\n  AppActionsType\r\n>;\r\n// All action types\r\nexport type AppActionsType =\r\n  | ActionTasksTypes\r\n  | ActionTodolistsTypes\r\n  | ActionAppTypes;\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport styles from \"./AddItem.module.scss\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n  callback: (title: string) => void;\r\n  disabled?: boolean;\r\n};\r\nexport const AddItem: React.FC<PropsType> = React.memo(\r\n  ({ callback, disabled }) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setNewTaskTitle(e.currentTarget.value);\r\n      setError(false);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n      if (newTaskTitle.trim() !== \"\") {\r\n        callback(newTaskTitle.trim());\r\n        setNewTaskTitle(\"\");\r\n      } else {\r\n        setError(true);\r\n      }\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (error) {\r\n        setError(false);\r\n      }\r\n\r\n      if (e.key === \"Enter\") {\r\n        onClickHandler();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <TextField\r\n          className={styles.textField}\r\n          variant=\"outlined\"\r\n          error={error}\r\n          value={newTaskTitle}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          label=\"Title\"\r\n          helperText={error}\r\n          disabled={disabled}\r\n        />\r\n        <IconButton\r\n          color=\"primary\"\r\n          className={styles.btnAdd}\r\n          onClick={onClickHandler}\r\n          disabled={disabled}\r\n        >\r\n          <AddBox />\r\n        </IconButton>\r\n        {error && (\r\n          <span className={error ? styles.errorMessage : \"\"}>\r\n            \"Title is required!\"\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   IconButton,\r\n//   TextField,\r\n// } from \"@material-ui/core\";\r\n// import { AddBox } from \"@material-ui/icons\";\r\n\r\n// type AddItemFormPropsType = {\r\n//   addItem: (title: string) => void;\r\n// };\r\n\r\n// export const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n//   console.log(\"AddItemForm called\");\r\n\r\n//   let [title, setTitle] = useState(\"\");\r\n//   let [error, setError] = useState<string | null>(null);\r\n\r\n//   const addItem = () => {\r\n//     if (title.trim() !== \"\") {\r\n//       props.addItem(title);\r\n//       setTitle(\"\");\r\n//     } else {\r\n//       setError(\"Title is required\");\r\n//     }\r\n//   };\r\n\r\n//   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     setTitle(e.currentTarget.value);\r\n//   };\r\n\r\n//   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//     if (error !== null) {\r\n//       setError(null);\r\n//     }\r\n//     if (e.charCode === 13) {\r\n//       addItem();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <TextField\r\n//         variant=\"outlined\"\r\n//         error={!!error}\r\n//         value={title}\r\n//         onChange={onChangeHandler}\r\n//         onKeyPress={onKeyPressHandler}\r\n//         label=\"Title\"\r\n//         helperText={error}\r\n//       />\r\n//       <IconButton color=\"primary\" onClick={addItem}>\r\n//         <AddBox />\r\n//       </IconButton>\r\n//     </div>\r\n//   );\r\n// });\r\n","import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport styles from \"./EditableSpan.module.scss\";\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  changeTaskTitle: (title: string) => void;\r\n  className?: string;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const EditableSpan: React.FC<PropsType> = React.memo(\r\n  ({ title, changeTaskTitle, className, disabled }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [value, setValue] = useState<string>(title);\r\n\r\n    const onEditMode = () => {\r\n      setEditMode(true);\r\n    };\r\n\r\n    const offEditMode = () => {\r\n      setEditMode(false);\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const newValue = e.currentTarget.value;\r\n      if (value) {\r\n        changeTaskTitle(newValue);\r\n      }\r\n      setValue(newValue);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === \"Enter\") {\r\n        setEditMode(false);\r\n      }\r\n    };\r\n\r\n    return editMode ? (\r\n      <TextField\r\n        className={styles.input}\r\n        autoFocus\r\n        onChange={onChangeHandler}\r\n        onBlur={offEditMode}\r\n        value={value}\r\n        onKeyPress={onKeyPressHandler}\r\n        disabled={disabled}\r\n      />\r\n    ) : (\r\n      <span className={className} onDoubleClick={onEditMode}>\r\n        {title}\r\n      </span>\r\n    );\r\n  }\r\n);\r\n","import React, { ChangeEvent, useCallback } from \"react\";\r\nimport { EditableSpan } from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport styles from \"./Task.module.scss\";\r\nimport { TaskStatuses, TaskType } from \"../../../../api/todolistsAPI\";\r\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { RequestStatusType } from \"../../../../App/appReducer\";\r\n\r\ntype TaskPropsType = {\r\n  changeTaskTitle: (taskId: string, title: string, todoListId: string) => void;\r\n  removeTask: (id: string, todoListId: string) => void;\r\n  checkboxChange: (\r\n    taskId: string,\r\n    status: TaskStatuses,\r\n    todoListId: string\r\n  ) => void;\r\n  task: TaskType;\r\n  todolistId: string;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n  const {\r\n    removeTask,\r\n    checkboxChange,\r\n    changeTaskTitle,\r\n    task,\r\n    todolistId,\r\n    entityStatus,\r\n  } = props;\r\n\r\n  const onRemoveHandler = () => {\r\n    removeTask(task.id, todolistId);\r\n  };\r\n\r\n  const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    checkboxChange(\r\n      task.id,\r\n      e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New,\r\n      todolistId\r\n    );\r\n  };\r\n\r\n  const changeTaskTitleHandler = useCallback(\r\n    (title: string) => {\r\n      changeTaskTitle(task.id, title, todolistId);\r\n    },\r\n    [changeTaskTitle, task.id, todolistId]\r\n  );\r\n  return (\r\n    <li className={task.status === TaskStatuses.Completed ? styles.isDone : \"\"}>\r\n      <div className={styles.wrapper}>\r\n        <Checkbox\r\n          checked={task.status === TaskStatuses.Completed}\r\n          onChange={onCheckboxChangeHandler}\r\n        />\r\n\r\n        <EditableSpan\r\n          className={styles.span}\r\n          changeTaskTitle={changeTaskTitleHandler}\r\n          title={task.title}\r\n          disabled={entityStatus === \"loading\"}\r\n        />\r\n\r\n        <IconButton className={styles.trash} onClick={onRemoveHandler}>\r\n          <Delete />\r\n        </IconButton>\r\n      </div>\r\n    </li>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { AddItem } from \"../../../Components/AddItem/AddItem\";\r\nimport styles from \"./Todolist.module.scss\";\r\nimport { EditableSpan } from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport { Task } from \"./Task/Task\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolistsAPI\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FilterValuesType } from \"../todolistsReducer\";\r\nimport { fetchTasksThunk } from \"../tasksReducer\";\r\nimport { RequestStatusType } from \"../../../App/appReducer\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  removeTask: (id: string, todoListId: string) => void;\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void;\r\n  addTask: (title: string, todoListId: string) => void;\r\n  checkboxChange: (\r\n    taskId: string,\r\n    status: TaskStatuses,\r\n    todoListId: string\r\n  ) => void;\r\n  filter: FilterValuesType;\r\n  id: string;\r\n  removeTodoList: (todoListId: string) => void;\r\n  changeTaskTitle: (taskId: string, title: string, todoListId: string) => void;\r\n  changeTodoListTitle: (todoListId: string, title: string) => void;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((props) => {\r\n  const {\r\n    title,\r\n    tasks,\r\n    removeTask,\r\n    changeFilter,\r\n    addTask,\r\n    checkboxChange,\r\n    filter,\r\n    id,\r\n    removeTodoList,\r\n    changeTaskTitle,\r\n    changeTodoListTitle,\r\n    entityStatus,\r\n  } = props;\r\n  const dispatch = useDispatch();\r\n  const onAllClickHandler = useCallback(() => changeFilter(\"All\", id), [\r\n    changeFilter,\r\n    id,\r\n  ]);\r\n\r\n  const onActiveClickHandler = useCallback(() => changeFilter(\"Active\", id), [\r\n    changeFilter,\r\n    id,\r\n  ]);\r\n\r\n  const onCompletedClickHandler = useCallback(\r\n    () => changeFilter(\"Completed\", id),\r\n    [changeFilter, id]\r\n  );\r\n\r\n  const onClickHandler = () => removeTodoList(id);\r\n\r\n  const addTaskItem = useCallback(\r\n    (title: string) => {\r\n      addTask(title, id);\r\n    },\r\n    [addTask, id]\r\n  );\r\n\r\n  const changeTodolistTitleHandler = useCallback(\r\n    (title: string) => {\r\n      changeTodoListTitle(id, title);\r\n    },\r\n    [changeTodoListTitle, id]\r\n  );\r\n\r\n  let tasksForTodoList = tasks;\r\n  if (filter === \"Completed\") {\r\n    tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed);\r\n  }\r\n  if (filter === \"Active\") {\r\n    tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksThunk(id));\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          className={styles.span}\r\n          title={title}\r\n          changeTaskTitle={changeTodolistTitleHandler}\r\n          disabled={entityStatus === \"loading\"}\r\n        />\r\n      </h3>\r\n      <AddItem callback={addTaskItem} disabled={entityStatus === \"loading\"} />\r\n      <div>\r\n        {tasksForTodoList.map((t) => (\r\n          <Task\r\n            entityStatus={t.entityStatus}\r\n            changeTaskTitle={changeTaskTitle}\r\n            removeTask={removeTask}\r\n            checkboxChange={checkboxChange}\r\n            task={t}\r\n            todolistId={id}\r\n            key={t.id}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={styles.btnsWrapper}>\r\n        <Button\r\n          className={styles.btn}\r\n          variant={filter === \"All\" ? \"contained\" : \"text\"}\r\n          onClick={onAllClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          className={styles.btn}\r\n          variant={filter === \"Active\" ? \"contained\" : \"text\"}\r\n          onClick={onActiveClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          className={styles.btn}\r\n          variant={filter === \"Completed\" ? \"contained\" : \"text\"}\r\n          onClick={onCompletedClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Completed\r\n        </Button>\r\n        <Button\r\n          className={styles.deleteBtn}\r\n          disabled={entityStatus === \"loading\"}\r\n          onClick={onClickHandler}\r\n        >\r\n          Remove all\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../api/todolistsAPI\";\r\nimport { AddItem } from \"../../Components/AddItem/AddItem\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport { AppRootStateType } from \"../../App/store\";\r\nimport { addTaskThunk, removeTaskThunk, updateTaskThunk } from \"./tasksReducer\";\r\nimport {\r\n  addTodolistsThunk,\r\n  changeFilterAC,\r\n  fetchTodolistsThunk,\r\n  FilterValuesType,\r\n  removeTodolistThunk,\r\n  TodoListEntityType,\r\n  updateTodolistTitleThunk,\r\n} from \"./todolistsReducer\";\r\nimport styles from \"./TodolistsList.module.scss\";\r\n\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\nexport const TodolistsList = () => {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector<AppRootStateType, TaskStateType>(\r\n    (state) => state.tasks\r\n  );\r\n  const todolists = useSelector<AppRootStateType, TodoListEntityType[]>(\r\n    (state) => state.todolists\r\n  );\r\n\r\n  // TDlists functions\r\n  const changeFilter = useCallback(\r\n    (value: FilterValuesType, todoListId: string) => {\r\n      const action = changeFilterAC(value, todoListId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTodoList = useCallback(\r\n    (todoListId: string) => {\r\n      dispatch(removeTodolistThunk(todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistsThunk(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodolistsThunk());\r\n  }, []);\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (todolistId: string, title: string) => {\r\n      dispatch(updateTodolistTitleThunk(todolistId, title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  //Tasks functions\r\n\r\n  const addTask = useCallback(\r\n    (title: string, todoListId: string) => {\r\n      dispatch(addTaskThunk(todoListId, title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTask = useCallback(\r\n    (id: string, todoListId: string) => {\r\n      dispatch(removeTaskThunk(id, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const checkboxChange = useCallback(\r\n    (taskId: string, status: TaskStatuses, todoListId: string) => {\r\n      dispatch(updateTaskThunk(taskId, { status }, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const changeTaskTitle = useCallback(\r\n    (taskId: string, title: string, todoListId: string) => {\r\n      dispatch(updateTaskThunk(taskId, { title }, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid container className={styles.addItem}>\r\n        <AddItem callback={addTodolist} />\r\n      </Grid>\r\n\r\n      <Grid container spacing={0}>\r\n        {todolists.map((tl) => {\r\n          let tasksForTodoList = tasks[tl.id];\r\n\r\n          return (\r\n            <Grid key={tl.id}>\r\n              <Paper\r\n                // style={{ padding: \"1rem\", backgroundColor: \"#9DDAC6\" }}\r\n                elevation={0}\r\n                variant=\"outlined\"\r\n                className={styles.paper}\r\n              >\r\n                <Todolist\r\n                  key={tl.id}\r\n                  entityStatus={tl.entityStatus}\r\n                  id={tl.id}\r\n                  filter={tl.filter}\r\n                  title={tl.title}\r\n                  tasks={tasksForTodoList}\r\n                  addTask={addTask}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  checkboxChange={checkboxChange}\r\n                  removeTodoList={removeTodoList}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\n// Types\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { AppRootStateType } from \"../../App/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppErrorAC } from \"../../App/appReducer\";\r\nimport styles from \"./ErrorSnackbar.module.scss\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, null | string>(\r\n    (state) => state.app.error\r\n  );\r\n  const dispatch = useDispatch();\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={error !== null}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert className={styles.message} onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./App.module.scss\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { TodolistsList } from \"../Features/Todolists/TodolistsList \";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./store\";\r\nimport { RequestStatusType } from \"./appReducer\";\r\nimport { ErrorSnackbar } from \"../Components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nfunction App() {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={styles.navbar}>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">TodoShka</Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n        {status === \"loading\" && (\r\n          <LinearProgress className={styles.progress} color=\"secondary\" />\r\n        )}\r\n      </AppBar>\r\n      <Container className={styles.container} maxWidth=\"xl\">\r\n        <TodolistsList />\r\n      </Container>\r\n      <ErrorSnackbar />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { store } from \"./App/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Todolist_header__P1QI6\",\"btnsWrapper\":\"Todolist_btnsWrapper__s30fF\",\"deleteBtn\":\"Todolist_deleteBtn__GpHnW\",\"btn\":\"Todolist_btn__6WOk9\",\"span\":\"Todolist_span__1ql2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"AddItem_errorMessage__1R9-_\",\"textField\":\"AddItem_textField__VQDjl\",\"btnAdd\":\"AddItem_btnAdd__3nWMo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trash\":\"Task_trash__2YWpi\",\"wrapper\":\"Task_wrapper__1bcWt\",\"span\":\"Task_span__Q0klS\",\"isDone\":\"Task_isDone__3dO0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"App_navbar__3XP-h\",\"container\":\"App_container__yxLVC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"TodolistsList_paper__2p22s\",\"addItem\":\"TodolistsList_addItem__3-WbB\"};"],"sourceRoot":""}