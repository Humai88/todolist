{"version":3,"sources":["Features/Todolists/Todolist/Todolist.module.scss","Components/Buttons/Button.module.scss","Components/AddItem/AddItem.module.scss","Features/Todolists/Todolist/Task/Task.module.scss","Components/Checkbox/SuperCheckbox.module.css","Components/Input/Input.module.scss","Features/Todolists/TodolistsList.module.scss","App/App.module.scss","Components/EditableSpan/EditableSpan.module.scss","api/todolistsAPI.ts","Features/Todolists/tasksReducer.ts","Features/Todolists/todolistsReducer.ts","App/store.ts","Components/Buttons/Button.tsx","Components/Input/Input.tsx","Components/AddItem/AddItem.tsx","Components/EditableSpan/EditableSpan.tsx","Components/Checkbox/SuperCheckbox.tsx","Features/Todolists/Todolist/Task/Task.tsx","Features/Todolists/Todolist/Todolist.tsx","Features/Todolists/TodolistsList .tsx","App/App.tsx","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","initialState","updateTaskThunk","dispatch","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","status","then","action","type","payload","updateTaskAC","console","log","v1","fetchTodolistsThunk","res","todos","data","rootReducer","combineReducers","state","stateCopy","forEach","tl","todoListId","filter","map","todolist","copy","todolists","value","store","createStore","applyMiddleware","thunk","window","Button","red","className","restProps","finalStyles","styles","default","activeFilter","Input","onChange","onChangeText","onKeyPress","onEnter","callback","error","spanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","key","AddItem","React","memo","useState","newTaskTitle","setNewTaskTitle","setError","onClickHandler","trim","wrapper","input","btnAdd","onClick","errorMessage","EditableSpan","changeTaskTitle","editMode","setEditMode","setValue","autoFocus","newValue","onBlur","onDoubleClick","SuperCheckbox","onChangeChecked","children","label","checked","Task","props","removeTask","checkboxChange","changeTaskTitleHandler","useCallback","Completed","isDone","New","span","trash","Todolist","changeFilter","addTask","removeTodoList","changeTodoListTitle","useDispatch","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskItem","changeTodolistTitleHandler","tasksForTodoList","useEffect","setTasksAC","items","header","btnsWrapper","filterBtns","TodolistsList","useSelector","changeFilterAC","addTodolist","item","addTodolistsThunk","updateTodolistTitleAC","updateTodolistTitleThunk","addTaskThunk","removeTaskAC","Grid","container","addItem","spacing","Paper","style","padding","backgroundColor","elevation","variant","paper","App","Fragment","AppBar","position","Toolbar","navbar","IconButton","edge","color","Typography","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abb15714.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Todolist_header__P1QI6\",\"btnsWrapper\":\"Todolist_btnsWrapper__s30fF\",\"filterBtns\":\"Todolist_filterBtns__KQUEi\",\"btnRemove\":\"Todolist_btnRemove__o3c4x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__g8KV2\",\"red\":\"Button_red__2s4lE\",\"activeFilter\":\"Button_activeFilter__217hU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"AddItem_errorMessage__1R9-_\",\"input\":\"AddItem_input__3FHaU\",\"btnAdd\":\"AddItem_btnAdd__3nWMo\",\"wrapper\":\"AddItem_wrapper__1CSsz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trash\":\"Task_trash__2YWpi\",\"wrapper\":\"Task_wrapper__1bcWt\",\"span\":\"Task_span__Q0klS\",\"isDone\":\"Task_isDone__3dO0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperCheckbox_input__29d-z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"Input_superInput__2-ELH\",\"errorInput\":\"Input_errorInput__37ZY3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"TodolistsList_paper__2p22s\",\"addItem\":\"TodolistsList_addItem__3-WbB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"App_navbar__3XP-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__3c1_L\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"api-key\": \"b108fd33-d977-4add-bda9-9da2037bdf7a\",\r\n  },\r\n});\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n  //T-dlist api\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>(`todo-lists`);\r\n  },\r\n  postTodolist(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {\r\n      title: title,\r\n    });\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n  },\r\n  updateTodolist(todolistId: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolistId}`, {\r\n      title: title,\r\n    });\r\n  },\r\n  //Tasks api\r\n  getTasks(todolistId: string) {\r\n    return instance.get<TaskResponseType>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  postTask(todolistId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(\r\n      `todo-lists/${todolistId}/tasks`,\r\n      {\r\n        title: title,\r\n      }\r\n    );\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`\r\n    );\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n    return instance.put<ResponseType<TaskType>>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`,\r\n      model\r\n    );\r\n  },\r\n};\r\n\r\n// Types\r\nexport type TodolistType = {\r\n  id: string;\r\n  addedDate: string;\r\n  order: number;\r\n  title: string;\r\n};\r\ntype ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: D;\r\n};\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\nexport type UpdateTaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: number;\r\n  priority: number;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\ntype TaskResponseType = {\r\n  items: TaskType[];\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","import { ActionTodolistsTypes, SetTodosType } from \"./todolistsReducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { TaskStateType } from \"./TodolistsList \";\r\nimport { TaskType, todolistsAPI, UpdateTaskType } from \"../../api/todolistsAPI\";\r\nimport { AppRootStateType } from \"../../App/store\";\r\n\r\nconst initialState: TaskStateType = {\r\n  // [todoListId_1]: [\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Apple\",\r\n  //     status: TaskStatuses.Completed,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_1,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Rice\",\r\n  //     status: TaskStatuses.New,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_1,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Milk\",\r\n  //     status: TaskStatuses.Completed,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_1,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Pears\",\r\n  //     status: TaskStatuses.New,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_1,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  // ],\r\n  // [todoListId_2]: [\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Book\",\r\n  //     status: TaskStatuses.Completed,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_2,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"News\",\r\n  //     status: TaskStatuses.New,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_2,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Newspaper\",\r\n  //     status: TaskStatuses.Completed,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_2,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  //   {\r\n  //     id: v1(),\r\n  //     title: \"Tutorials\",\r\n  //     status: TaskStatuses.New,\r\n  //     priority: TaskPriorities.Middle,\r\n  //     description: \"Description\",\r\n  //     todoListId: todoListId_2,\r\n  //     deadline: \"\",\r\n  //     order: 1,\r\n  //     addedDate: \"\",\r\n  //     startDate: \"\",\r\n  //   },\r\n  // ],\r\n};\r\n\r\nexport const tasksReducer = (\r\n  state = initialState,\r\n  action: ActionTasksTypes\r\n): TaskStateType => {\r\n  switch (action.type) {\r\n    case \"SET_TASKS\": {\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: action.payload.tasks,\r\n      };\r\n    }\r\n    case \"SET_TODOLISTS\": {\r\n      let stateCopy = { ...state };\r\n      action.payload.todos.forEach((tl) => {\r\n        stateCopy[tl.id] = [];\r\n      });\r\n      return stateCopy;\r\n    }\r\n    case \"ADD_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.task.todoListId]: [\r\n          action.payload.task,\r\n          ...state[action.payload.task.todoListId],\r\n        ],\r\n      };\r\n    case \"REMOVE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todoListId]: state[action.payload.todoListId].filter(\r\n          (t) => t.id !== action.payload.taskId\r\n        ),\r\n      };\r\n\r\n    case \"UPDATE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: state[action.payload.todolistId].map((t) =>\r\n          t.id === action.payload.taskId ? { ...t, ...action.payload.model } : t\r\n        ),\r\n      };\r\n\r\n    case \"ADD_TODOLIST\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolist.id]: [],\r\n      };\r\n    case \"REMOVE_TODOLIST\":\r\n      const copy = { ...state };\r\n      delete copy[action.payload.todoListId];\r\n      return copy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action creators\r\nexport const addTaskAC = (task: TaskType) => {\r\n  return {\r\n    type: \"ADD_TASK\",\r\n    payload: {\r\n      task,\r\n    },\r\n  } as const;\r\n};\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n  return {\r\n    type: \"REMOVE_TASK\",\r\n    payload: {\r\n      todoListId,\r\n      taskId,\r\n    },\r\n  } as const;\r\n};\r\nexport const updateTaskAC = (\r\n  taskId: string,\r\n  model: UpdateTaskModelType,\r\n  todolistId: string\r\n) => {\r\n  return {\r\n    type: \"UPDATE_TASK\",\r\n    payload: {\r\n      todolistId,\r\n      taskId,\r\n      model,\r\n    },\r\n  } as const;\r\n};\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => {\r\n  return {\r\n    type: \"SET_TASKS\",\r\n    payload: {\r\n      tasks,\r\n      todolistId,\r\n    },\r\n  } as const;\r\n};\r\n\r\n// Thunks\r\nexport const fetchTasksThunk = (todolistId: string) => (\r\n  dispatch: Dispatch<ActionTasksTypes>\r\n) => {\r\n  todolistsAPI.getTasks(todolistId).then((res) => {\r\n    const tasks = res.data.items;\r\n    const action = setTasksAC(tasks, todolistId);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\nexport const removeTaskThunk = (taskId: string, todolistId: string) => (\r\n  dispatch: Dispatch<ActionTasksTypes>\r\n) => {\r\n  todolistsAPI.deleteTask(todolistId, taskId).then((res) => {\r\n    const action = removeTaskAC(taskId, todolistId);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\nexport const addTaskThunk = (todolistId: string, title: string) => (\r\n  dispatch: Dispatch<ActionTasksTypes>\r\n) => {\r\n  todolistsAPI.postTask(todolistId, title).then((res) => {\r\n    const task = res.data.data.item;\r\n    const action = addTaskAC(task);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\nexport const updateTaskThunk = (\r\n  taskId: string,\r\n  model: UpdateTaskModelType,\r\n  todolistId: string\r\n) => (\r\n  dispatch: Dispatch<ActionTasksTypes>,\r\n  getState: () => AppRootStateType\r\n) => {\r\n  const allTasksFromState = getState().tasks;\r\n  const tasksForCurrentTodolist = allTasksFromState[todolistId];\r\n  const task = tasksForCurrentTodolist.find((t) => {\r\n    return t.id === taskId;\r\n  });\r\n  if (!task) {\r\n    console.log(\"No data\");\r\n    return;\r\n  }\r\n  const apiModel: UpdateTaskType = {\r\n    title: task.title,\r\n    startDate: task.startDate,\r\n    priority: task.priority,\r\n    description: task.description,\r\n    deadline: task.deadline,\r\n    status: task.status,\r\n    ...model,\r\n  };\r\n  todolistsAPI.updateTask(todolistId, taskId, apiModel).then(() => {\r\n    const action = updateTaskAC(taskId, model, todolistId);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\n// Types\r\nexport type ActionTasksTypes =\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ActionTodolistsTypes\r\n  | SetTodosType\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof updateTaskAC>;\r\n\r\ntype UpdateTaskModelType = {\r\n  description?: string;\r\n  title?: string;\r\n  status?: number;\r\n  priority?: number;\r\n  startDate?: string;\r\n  deadline?: string;\r\n};\r\n","import { todolistsAPI, TodolistType } from \"./../../api/todolistsAPI\";\r\nimport { v1 } from \"uuid\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n// For tests\r\nexport const todoListId_1 = v1();\r\nexport const todoListId_2 = v1();\r\n\r\nconst initialState: TodoListEntityType[] = [];\r\n\r\nexport const todolistsReducer = (\r\n  state = initialState,\r\n  action: ActionTodolistsTypes\r\n): TodoListEntityType[] => {\r\n  switch (action.type) {\r\n    case \"CHANGE_FILTER\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.todolistId\r\n          ? { ...tl, filter: action.payload.value }\r\n          : tl\r\n      );\r\n    case \"REMOVE_TODOLIST\":\r\n      return state.filter((tl) => tl.id !== action.payload.todoListId);\r\n    case \"ADD_TODOLIST\":\r\n      return [\r\n        {\r\n          ...action.payload.todolist,\r\n          filter: \"All\",\r\n        },\r\n        ...state,\r\n      ];\r\n    case \"UPDATE_TODOLIST_TITLE\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.todolistId\r\n          ? { ...tl, title: action.payload.title }\r\n          : tl\r\n      );\r\n    case \"SET_TODOLISTS\":\r\n      return action.payload.todos.map((tl) => {\r\n        return { ...tl, filter: \"All\" };\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action creators\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n  return {\r\n    type: \"ADD_TODOLIST\",\r\n    payload: {\r\n      todolist,\r\n    },\r\n  } as const;\r\n};\r\nexport const removeTodolistAC = (todoListId: string) => {\r\n  return {\r\n    type: \"REMOVE_TODOLIST\",\r\n    payload: {\r\n      todoListId,\r\n    },\r\n  } as const;\r\n};\r\nexport const changeFilterAC = (value: FilterValuesType, todolistId: string) => {\r\n  return {\r\n    type: \"CHANGE_FILTER\",\r\n    payload: {\r\n      value,\r\n      todolistId,\r\n    },\r\n  } as const;\r\n};\r\nexport const updateTodolistTitleAC = (todolistId: string, title: string) => {\r\n  return {\r\n    type: \"UPDATE_TODOLIST_TITLE\",\r\n    payload: {\r\n      todolistId,\r\n      title,\r\n    },\r\n  } as const;\r\n};\r\nexport const setTodolistsAC = (todos: TodolistType[]) => {\r\n  return {\r\n    type: \"SET_TODOLISTS\",\r\n    payload: {\r\n      todos,\r\n    },\r\n  } as const;\r\n};\r\n\r\n// Thunks\r\nexport const fetchTodolistsThunk = (\r\n  dispatch: Dispatch<ActionTodolistsTypes>\r\n) => {\r\n  todolistsAPI.getTodolists().then((res) => {\r\n    const action = setTodolistsAC(res.data);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\nexport const removeTodolistThunk = (todolistId: string) => (\r\n  dispatch: Dispatch<ActionTodolistsTypes>\r\n) => {\r\n  todolistsAPI.deleteTodolist(todolistId).then((res) => {\r\n    const action = removeTodolistAC(todolistId);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\nexport const addTodolistsThunk = (title: string) => (\r\n  dispatch: Dispatch<ActionTodolistsTypes>\r\n) => {\r\n  todolistsAPI.postTodolist(title).then((res) => {\r\n    const action = addTodolistAC(res.data.data.item);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\nexport const updateTodolistTitleThunk = (todolistId: string, title: string) => (\r\n  dispatch: Dispatch<ActionTodolistsTypes>\r\n) => {\r\n  todolistsAPI.updateTodolist(todolistId, title).then((res) => {\r\n    const action = updateTodolistTitleAC(todolistId, title);\r\n    dispatch(action);\r\n  });\r\n};\r\n\r\n// Types\r\nexport type ActionTodolistsTypes =\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof changeFilterAC>\r\n  | ReturnType<typeof updateTodolistTitleAC>\r\n  | ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type SetTodosType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodoListEntityType = TodolistType & {\r\n  filter: FilterValuesType;\r\n};\r\nexport type FilterValuesType = \"All\" | \"Completed\" | \"Active\";\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { tasksReducer } from \"../Features/Todolists/tasksReducer\";\r\nimport { todolistsReducer } from \"../Features/Todolists/todolistsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport { FilterValuesType } from \"../../Features/Todolists/todolistsReducer\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<\r\n  ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n>;\r\n\r\ntype propsType = DefaultButtonPropsType & {\r\n  filter?: FilterValuesType;\r\n  red?: boolean;\r\n};\r\n\r\nexport const Button: React.FC<propsType> = ({\r\n  title,\r\n  red,\r\n  filter,\r\n  className,\r\n  ...restProps\r\n}) => {\r\n  const finalStyles = `${className && className} ${\r\n    red ? styles.red + \" \" + styles.default : styles.default\r\n  } ${filter === title ? styles.activeFilter : \"\"}`;\r\n  return (\r\n    <>\r\n      <button className={finalStyles} {...restProps} />\r\n    </>\r\n  );\r\n};\r\n","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes,\r\n  KeyboardEvent,\r\n} from \"react\";\r\n\r\nimport styles from \"./Input.module.scss\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\ntype PropsType = DefaultInputPropsType & {\r\n  onChangeText?: (value: string) => void;\r\n  onEnter?: () => void;\r\n  error?: boolean;\r\n  spanClassName?: string;\r\n  callback?: (title: string) => void;\r\n};\r\n\r\nexport const Input: React.FC<PropsType> = ({\r\n  type,\r\n  onChange,\r\n  onChangeText,\r\n  onKeyPress,\r\n  onEnter,\r\n  callback,\r\n  className,\r\n  spanClassName,\r\n  error,\r\n  ...restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && onChange(e);\r\n    onChangeText && onChangeText(e.currentTarget.value);\r\n  };\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n    onEnter && e.key === \"Enter\" && onEnter();\r\n  };\r\n  const finalInputClassName = `${\r\n    error ? styles.errorInput : styles.superInput\r\n  } ${className ? className : \"\"}`;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type={\"text\"}\r\n        onChange={onChangeCallback}\r\n        onKeyPress={onKeyPressCallback}\r\n        className={finalInputClassName}\r\n        {...restProps}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent } from \"react\";\r\nimport { Button } from \"./../Buttons/Button\";\r\nimport { useState } from \"react\";\r\nimport { Input } from \"../Input/Input\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport styles from \"./AddItem.module.scss\";\r\n\r\ntype PropsType = {\r\n  callback: (title: string) => void;\r\n};\r\nexport const AddItem: React.FC<PropsType> = React.memo(({ callback }) => {\r\n  const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\r\n  const [error, setError] = useState<boolean>(false);\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTaskTitle(e.currentTarget.value);\r\n    setError(false);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    if (newTaskTitle.trim() !== \"\") {\r\n      callback(newTaskTitle.trim());\r\n      setNewTaskTitle(\"\");\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error) {\r\n      setError(false);\r\n    }\r\n\r\n    if (e.key === \"Enter\") {\r\n      onClickHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <Input\r\n        className={styles.input}\r\n        error={error}\r\n        value={newTaskTitle}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n      />\r\n\r\n      <Button title=\"Add\" className={styles.btnAdd} onClick={onClickHandler}>\r\n        <FaPlus />\r\n      </Button>\r\n\r\n      {error && (\r\n        <span className={error ? styles.errorMessage : \"\"}>\r\n          \"Title is required!\"\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\n// import TextField from \"@material-ui/core/TextField\";\r\nimport styles from \"./EditableSpan.module.scss\";\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  changeTaskTitle: (title: string) => void;\r\n  className?: string;\r\n};\r\n\r\nexport const EditableSpan: React.FC<PropsType> = React.memo(\r\n  ({ title, changeTaskTitle, className }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [value, setValue] = useState<string>(title);\r\n\r\n    const onEditMode = () => {\r\n      setEditMode(true);\r\n    };\r\n\r\n    const offEditMode = () => {\r\n      setEditMode(false);\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const newValue = e.currentTarget.value;\r\n      if (value) {\r\n        changeTaskTitle(newValue);\r\n      }\r\n      setValue(newValue);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === \"Enter\") {\r\n        setEditMode(false);\r\n      }\r\n    };\r\n\r\n    return editMode ? (\r\n      <input\r\n        className={styles.input}\r\n        autoFocus\r\n        onChange={onChangeHandler}\r\n        onBlur={offEditMode}\r\n        value={value}\r\n        onKeyPress={onKeyPressHandler}\r\n      />\r\n    ) : (\r\n      <span className={className} onDoubleClick={onEditMode}>\r\n        {title}\r\n      </span>\r\n    );\r\n  }\r\n);\r\n","import React, {\n  ChangeEvent,\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n} from \"react\";\nimport styles from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n  onChangeChecked?: (checked: boolean) => void;\n  spanClassName?: string;\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = ({\n  type,\n  onChange,\n  onChangeChecked,\n  className,\n  spanClassName,\n  children,\n  ...restProps\n}) => {\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange && onChange(e);\n    onChangeChecked && onChangeChecked(e.currentTarget.checked);\n  };\n\n  const finalInputClassName = `${styles.input} ${className ? className : \"\"}`;\n\n  return (\n    <label className={styles.label}>\n      <input\n        type={\"checkbox\"}\n        onChange={onChangeCallback}\n        className={finalInputClassName}\n        {...restProps}\n      />\n      {children && <span className={styles.spanClassName}>{children}</span>}\n    </label>\n  );\n};\n\nexport default SuperCheckbox;\n","import React, { ChangeEvent, useCallback } from \"react\";\r\n\r\nimport { EditableSpan } from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport styles from \"./Task.module.scss\";\r\nimport { TaskStatuses, TaskType } from \"../../../../api/todolistsAPI\";\r\nimport SuperCheckbox from \"../../../../Components/Checkbox/SuperCheckbox\";\r\n\r\ntype TaskPropsType = {\r\n  changeTaskTitle: (taskId: string, title: string, todoListId: string) => void;\r\n  removeTask: (id: string, todoListId: string) => void;\r\n  checkboxChange: (\r\n    taskId: string,\r\n    status: TaskStatuses,\r\n    todoListId: string\r\n  ) => void;\r\n  task: TaskType;\r\n  todolistId: string;\r\n};\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n  const {\r\n    removeTask,\r\n    checkboxChange,\r\n    changeTaskTitle,\r\n    task,\r\n    todolistId,\r\n  } = props;\r\n\r\n  const onRemoveHandler = () => {\r\n    removeTask(task.id, todolistId);\r\n  };\r\n\r\n  const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    checkboxChange(\r\n      task.id,\r\n      e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New,\r\n      todolistId\r\n    );\r\n  };\r\n\r\n  const changeTaskTitleHandler = useCallback(\r\n    (title: string) => {\r\n      changeTaskTitle(task.id, title, todolistId);\r\n    },\r\n    [changeTaskTitle, task.id, todolistId]\r\n  );\r\n  return (\r\n    <li className={task.status === TaskStatuses.Completed ? styles.isDone : \"\"}>\r\n      <div className={styles.wrapper}>\r\n        <SuperCheckbox\r\n          checked={task.status === TaskStatuses.Completed}\r\n          onChange={onCheckboxChangeHandler}\r\n        >\r\n          <EditableSpan\r\n            className={styles.span}\r\n            changeTaskTitle={changeTaskTitleHandler}\r\n            title={task.title}\r\n          />\r\n        </SuperCheckbox>\r\n\r\n        <div className={styles.trash} onClick={onRemoveHandler}>\r\n          <FaTrash />\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { Button } from \"../../../Components/Buttons/Button\";\r\nimport { AddItem } from \"../../../Components/AddItem/AddItem\";\r\nimport styles from \"./Todolist.module.scss\";\r\nimport { EditableSpan } from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport { Task } from \"./Task/Task\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolistsAPI\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FilterValuesType } from \"../todolistsReducer\";\r\nimport { fetchTasksThunk } from \"../tasksReducer\";\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  removeTask: (id: string, todoListId: string) => void;\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void;\r\n  addTask: (title: string, todoListId: string) => void;\r\n  checkboxChange: (\r\n    taskId: string,\r\n    status: TaskStatuses,\r\n    todoListId: string\r\n  ) => void;\r\n  filter: FilterValuesType;\r\n  id: string;\r\n  removeTodoList: (todoListId: string) => void;\r\n  changeTaskTitle: (taskId: string, title: string, todoListId: string) => void;\r\n  changeTodoListTitle: (todoListId: string, title: string) => void;\r\n};\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((props) => {\r\n  const {\r\n    title,\r\n    tasks,\r\n    removeTask,\r\n    changeFilter,\r\n    addTask,\r\n    checkboxChange,\r\n    filter,\r\n    id,\r\n    removeTodoList,\r\n    changeTaskTitle,\r\n    changeTodoListTitle,\r\n  } = props;\r\n  const dispatch = useDispatch();\r\n  const onAllClickHandler = useCallback(() => changeFilter(\"All\", id), [\r\n    changeFilter,\r\n    id,\r\n  ]);\r\n\r\n  const onActiveClickHandler = useCallback(() => changeFilter(\"Active\", id), [\r\n    changeFilter,\r\n    id,\r\n  ]);\r\n\r\n  const onCompletedClickHandler = useCallback(\r\n    () => changeFilter(\"Completed\", id),\r\n    [changeFilter, id]\r\n  );\r\n\r\n  const onClickHandler = () => removeTodoList(id);\r\n  const addTaskItem = useCallback(\r\n    (title: string) => {\r\n      addTask(title, id);\r\n    },\r\n    [addTask, id]\r\n  );\r\n\r\n  const changeTodolistTitleHandler = useCallback(\r\n    (title: string) => {\r\n      changeTodoListTitle(id, title);\r\n    },\r\n    [changeTodoListTitle, id]\r\n  );\r\n\r\n  let tasksForTodoList = tasks;\r\n  if (filter === \"Completed\") {\r\n    tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed);\r\n  }\r\n  if (filter === \"Active\") {\r\n    tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksThunk(id));\r\n  }, []);\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <EditableSpan\r\n        className={styles.header}\r\n        title={title}\r\n        changeTaskTitle={changeTodolistTitleHandler}\r\n      />\r\n\r\n      <AddItem callback={addTaskItem} />\r\n\r\n      <ul>\r\n        {tasksForTodoList.map((t) => (\r\n          <Task\r\n            changeTaskTitle={changeTaskTitle}\r\n            removeTask={removeTask}\r\n            checkboxChange={checkboxChange}\r\n            task={t}\r\n            todolistId={id}\r\n            key={t.id}\r\n          />\r\n        ))}\r\n      </ul>\r\n\r\n      <div className={styles.btnsWrapper}>\r\n        <Button\r\n          className={styles.filterBtns}\r\n          filter={filter}\r\n          title=\"All\"\r\n          onClick={onAllClickHandler}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          className={styles.filterBtns}\r\n          filter={filter}\r\n          title=\"Active\"\r\n          onClick={onActiveClickHandler}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          className={styles.filterBtns}\r\n          filter={filter}\r\n          title=\"Completed\"\r\n          onClick={onCompletedClickHandler}\r\n        >\r\n          Completed\r\n        </Button>\r\n\r\n        <Button\r\n          className={styles.filterBtns}\r\n          title=\"RemoveAll\"\r\n          red\r\n          onClick={onClickHandler}\r\n        >\r\n          Remove all\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../api/todolistsAPI\";\r\nimport { AddItem } from \"../../Components/AddItem/AddItem\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport { AppRootStateType } from \"../../App/store\";\r\nimport { addTaskThunk, removeTaskThunk, updateTaskThunk } from \"./tasksReducer\";\r\nimport {\r\n  addTodolistsThunk,\r\n  changeFilterAC,\r\n  fetchTodolistsThunk,\r\n  FilterValuesType,\r\n  removeTodolistThunk,\r\n  TodoListEntityType,\r\n  updateTodolistTitleThunk,\r\n} from \"./todolistsReducer\";\r\nimport styles from \"./TodolistsList.module.scss\";\r\n\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\nexport const TodolistsList = () => {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector<AppRootStateType, TaskStateType>(\r\n    (state) => state.tasks\r\n  );\r\n  const todolists = useSelector<AppRootStateType, TodoListEntityType[]>(\r\n    (state) => state.todolists\r\n  );\r\n\r\n  // TDlists functions\r\n  const changeFilter = useCallback(\r\n    (value: FilterValuesType, todoListId: string) => {\r\n      const action = changeFilterAC(value, todoListId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTodoList = useCallback(\r\n    (todoListId: string) => {\r\n      dispatch(removeTodolistThunk(todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistsThunk(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodolistsThunk);\r\n  }, []);\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (todolistId: string, title: string) => {\r\n      dispatch(updateTodolistTitleThunk(todolistId, title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  //Tasks functions\r\n\r\n  const addTask = useCallback(\r\n    (title: string, todoListId: string) => {\r\n      dispatch(addTaskThunk(todoListId, title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTask = useCallback(\r\n    (id: string, todoListId: string) => {\r\n      dispatch(removeTaskThunk(id, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const checkboxChange = useCallback(\r\n    (taskId: string, status: TaskStatuses, todoListId: string) => {\r\n      dispatch(updateTaskThunk(taskId, { status }, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const changeTaskTitle = useCallback(\r\n    (taskId: string, title: string, todoListId: string) => {\r\n      dispatch(updateTaskThunk(taskId, { title }, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid container className={styles.addItem}>\r\n        <AddItem callback={addTodolist} />\r\n      </Grid>\r\n\r\n      <Grid container spacing={0}>\r\n        {todolists.map((tl) => {\r\n          let tasksForTodoList = tasks[tl.id];\r\n\r\n          return (\r\n            <Grid key={tl.id}>\r\n              <Paper\r\n                style={{ padding: \"1rem\", backgroundColor: \"#202d47\" }}\r\n                elevation={0}\r\n                variant=\"outlined\"\r\n                className={styles.paper}\r\n              >\r\n                <Todolist\r\n                  key={tl.id}\r\n                  id={tl.id}\r\n                  filter={tl.filter}\r\n                  title={tl.title}\r\n                  tasks={tasksForTodoList}\r\n                  addTask={addTask}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  checkboxChange={checkboxChange}\r\n                  removeTodoList={removeTodoList}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\n// Types\r\n","import React from \"react\";\r\nimport styles from \"./App.module.scss\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport { TodolistsList } from \"../Features/Todolists/TodolistsList \";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={styles.navbar}>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">TodoShka</Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"xl\">\r\n        <TodolistsList />\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { store } from \"./App/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}