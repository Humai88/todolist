{"version":3,"sources":["Components/EditableSpan/EditableSpan.module.scss","api/todolistsAPI.ts","App/appReducer.tsx","Features/Todolists/tasksReducer.ts","Features/Todolists/todolistsReducer.ts","App/store.ts","Components/AddItem/AddItem.tsx","Components/EditableSpan/EditableSpan.tsx","Features/Todolists/Todolist/Task/Task.tsx","Features/Todolists/Todolist/Todolist.tsx","Features/Todolists/TodolistsList .tsx","Components/ErrorSnackbar/ErrorSnackbar.tsx","App/App.tsx","index.tsx","Features/Todolists/Todolist/Todolist.module.scss","Components/AddItem/AddItem.module.scss","Features/Todolists/Todolist/Task/Task.module.scss","App/App.module.scss","Features/Todolists/TodolistsList.module.scss"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","initialState","status","error","setAppStatusAC","type","payload","setAppErrorAC","updateTaskThunk","dispatch","getState","task","tasks","find","t","id","apiModel","startDate","priority","description","deadline","then","updateTaskAC","v1","rootReducer","combineReducers","state","action","stateCopy","todos","forEach","tl","todoListId","filter","map","todolist","copy","todolists","value","entityStatus","app","store","createStore","applyMiddleware","thunk","window","AddItem","React","memo","callback","useState","newTaskTitle","setNewTaskTitle","setError","onClickHandler","trim","className","styles","wrapper","TextField","textField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","color","btnAdd","onClick","AddBox","errorMessage","EditableSpan","changeTaskTitle","editMode","setEditMode","setValue","input","autoFocus","newValue","onBlur","onDoubleClick","Task","props","removeTask","checkboxChange","changeTaskTitleHandler","useCallback","Completed","isDone","checked","New","span","trash","Delete","Todolist","changeFilter","addTask","removeTodoList","changeTodoListTitle","useDispatch","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","addTaskItem","changeTodolistTitleHandler","tasksForTodoList","useEffect","res","data","items","setTasksAC","btnsWrapper","btn","deleteBtn","disabled","TodolistsList","useSelector","changeFilterAC","resultCode","messages","length","addTodolist","item","addTodolistsThunk","updateTodolistTitleAC","updateTodolistTitleThunk","addTaskAC","addTaskThunk","removeTaskAC","Grid","container","addItem","spacing","Paper","elevation","paper","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","Fragment","AppBar","position","Toolbar","navbar","IconButton","edge","Typography","Button","LinearProgress","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51a5b048.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__3c1_L\",\"span\":\"EditableSpan_span__1cdp9\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"api-key\": \"b108fd33-d977-4add-bda9-9da2037bdf7a\",\r\n  },\r\n});\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n  //T-dlist api\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>(`todo-lists`);\r\n  },\r\n  postTodolist(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists`, {\r\n      title: title,\r\n    });\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n  },\r\n  updateTodolist(todolistId: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${todolistId}`, {\r\n      title: title,\r\n    });\r\n  },\r\n  //Tasks api\r\n  getTasks(todolistId: string) {\r\n    return instance.get<TaskResponseType>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  postTask(todolistId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(\r\n      `todo-lists/${todolistId}/tasks`,\r\n      {\r\n        title: title,\r\n      }\r\n    );\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`\r\n    );\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n    return instance.put<ResponseType<TaskType>>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`,\r\n      model\r\n    );\r\n  },\r\n};\r\n\r\n// Types\r\nexport type TodolistType = {\r\n  id: string;\r\n  addedDate: string;\r\n  order: number;\r\n  title: string;\r\n};\r\ntype ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: D;\r\n};\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\nexport type UpdateTaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: number;\r\n  priority: number;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\ntype TaskResponseType = {\r\n  items: TaskType[];\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","export type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n\r\nconst initialState = {\r\n  status: \"idle\" as RequestStatusType,\r\n  error: null as null | string,\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionAppTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, status: action.payload.status };\r\n    case \"APP/SET-ERROR\":\r\n      return { ...state, error: action.payload.error };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n  return {\r\n    type: \"APP/SET-STATUS\",\r\n    payload: {\r\n      status,\r\n    },\r\n  } as const;\r\n};\r\nexport const setAppErrorAC = (error: null | string) => {\r\n  return {\r\n    type: \"APP/SET-ERROR\",\r\n    payload: {\r\n      error,\r\n    },\r\n  } as const;\r\n};\r\n\r\nexport type ActionAppTypes =\r\n  | ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppErrorAC>;\r\n","import { ActionTodolistsTypes, SetTodosType } from \"./todolistsReducer\";\r\nimport { TaskStateType } from \"./TodolistsList \";\r\nimport { TaskType, todolistsAPI, UpdateTaskType } from \"../../api/todolistsAPI\";\r\nimport { AppRootStateType, ThunkType } from \"../../App/store\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../App/appReducer\";\r\n\r\nconst initialState: TaskStateType = {};\r\n\r\nexport const tasksReducer = (\r\n  state = initialState,\r\n  action: ActionTasksTypes\r\n): TaskStateType => {\r\n  switch (action.type) {\r\n    case \"SET_TASKS\": {\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: action.payload.tasks,\r\n      };\r\n    }\r\n    case \"SET_TODOLISTS\": {\r\n      let stateCopy = { ...state };\r\n      action.payload.todos.forEach((tl) => {\r\n        stateCopy[tl.id] = [];\r\n      });\r\n      return stateCopy;\r\n    }\r\n    case \"ADD_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.task.todoListId]: [\r\n          action.payload.task,\r\n          ...state[action.payload.task.todoListId],\r\n        ],\r\n      };\r\n    case \"REMOVE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todoListId]: state[action.payload.todoListId].filter(\r\n          (t) => t.id !== action.payload.taskId\r\n        ),\r\n      };\r\n\r\n    case \"UPDATE_TASK\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolistId]: state[action.payload.todolistId].map((t) =>\r\n          t.id === action.payload.taskId ? { ...t, ...action.payload.model } : t\r\n        ),\r\n      };\r\n\r\n    case \"ADD_TODOLIST\":\r\n      return {\r\n        ...state,\r\n        [action.payload.todolist.id]: [],\r\n      };\r\n    case \"REMOVE_TODOLIST\":\r\n      const copy = { ...state };\r\n      delete copy[action.payload.todoListId];\r\n      return copy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action creators\r\nexport const addTaskAC = (task: TaskType) => {\r\n  return {\r\n    type: \"ADD_TASK\",\r\n    payload: {\r\n      task,\r\n    },\r\n  } as const;\r\n};\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => {\r\n  return {\r\n    type: \"REMOVE_TASK\",\r\n    payload: {\r\n      todoListId,\r\n      taskId,\r\n    },\r\n  } as const;\r\n};\r\nexport const updateTaskAC = (\r\n  taskId: string,\r\n  model: UpdateTaskModelType,\r\n  todolistId: string\r\n) => {\r\n  return {\r\n    type: \"UPDATE_TASK\",\r\n    payload: {\r\n      todolistId,\r\n      taskId,\r\n      model,\r\n    },\r\n  } as const;\r\n};\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => {\r\n  return {\r\n    type: \"SET_TASKS\",\r\n    payload: {\r\n      tasks,\r\n      todolistId,\r\n    },\r\n  } as const;\r\n};\r\n\r\n// Thunks\r\nexport const fetchTasksThunk = (todolistId: string): ThunkType => (\r\n  dispatch\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.getTasks(todolistId).then((res) => {\r\n    dispatch(setAppStatusAC(\"succeeded\"));\r\n    const tasks = res.data.items;\r\n    dispatch(setTasksAC(tasks, todolistId));\r\n  });\r\n};\r\n\r\nexport const removeTaskThunk = (\r\n  taskId: string,\r\n  todolistId: string\r\n): ThunkType => (dispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.deleteTask(todolistId, taskId).then((res) => {\r\n    dispatch(setAppStatusAC(\"succeeded\"));\r\n    dispatch(removeTaskAC(taskId, todolistId));\r\n  });\r\n};\r\n\r\nexport const addTaskThunk = (todolistId: string, title: string): ThunkType => (\r\n  dispatch\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.postTask(todolistId, title).then((res) => {\r\n    if (res.data.resultCode === 0) {\r\n      const task = res.data.data.item;\r\n      dispatch(addTaskAC(task));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    } else {\r\n      if (res.data.messages.length) {\r\n        dispatch(setAppErrorAC(res.data.messages[0]));\r\n      } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"));\r\n      }\r\n      dispatch(setAppStatusAC(\"failed\"));\r\n    }\r\n  });\r\n};\r\n\r\nexport const updateTaskThunk = (\r\n  taskId: string,\r\n  model: UpdateTaskModelType,\r\n  todolistId: string\r\n): ThunkType => (dispatch, getState: () => AppRootStateType) => {\r\n  const allTasksFromState = getState().tasks;\r\n  const tasksForCurrentTodolist = allTasksFromState[todolistId];\r\n  const task = tasksForCurrentTodolist.find((t) => {\r\n    return t.id === taskId;\r\n  });\r\n  if (!task) {\r\n    return;\r\n  }\r\n  const apiModel: UpdateTaskType = {\r\n    title: task.title,\r\n    startDate: task.startDate,\r\n    priority: task.priority,\r\n    description: task.description,\r\n    deadline: task.deadline,\r\n    status: task.status,\r\n    ...model,\r\n  };\r\n  todolistsAPI.updateTask(todolistId, taskId, apiModel).then(() => {\r\n    dispatch(updateTaskAC(taskId, model, todolistId));\r\n  });\r\n};\r\n\r\n// Types\r\nexport type ActionTasksTypes =\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ActionTodolistsTypes\r\n  | SetTodosType\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof updateTaskAC>;\r\n\r\ntype UpdateTaskModelType = {\r\n  description?: string;\r\n  title?: string;\r\n  status?: number;\r\n  priority?: number;\r\n  startDate?: string;\r\n  deadline?: string;\r\n};\r\n","import { todolistsAPI, TodolistType } from \"./../../api/todolistsAPI\";\r\nimport { v1 } from \"uuid\";\r\nimport { ThunkType } from \"../../App/store\";\r\nimport {\r\n  RequestStatusType,\r\n  setAppErrorAC,\r\n  setAppStatusAC,\r\n} from \"../../App/appReducer\";\r\n\r\n// For tests\r\nexport const todoListId_1 = v1();\r\nexport const todoListId_2 = v1();\r\n\r\nconst initialState: TodoListEntityType[] = [];\r\n\r\nexport const todolistsReducer = (\r\n  state = initialState,\r\n  action: ActionTodolistsTypes\r\n): TodoListEntityType[] => {\r\n  switch (action.type) {\r\n    case \"CHANGE_FILTER\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.todolistId\r\n          ? { ...tl, filter: action.payload.value }\r\n          : tl\r\n      );\r\n    case \"REMOVE_TODOLIST\":\r\n      return state.filter((tl) => tl.id !== action.payload.todoListId);\r\n    case \"ADD_TODOLIST\":\r\n      return [\r\n        {\r\n          ...action.payload.todolist,\r\n          filter: \"All\",\r\n          entityStatus: \"idle\",\r\n        },\r\n        ...state,\r\n      ];\r\n    case \"UPDATE_TODOLIST_TITLE\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.todolistId\r\n          ? { ...tl, title: action.payload.title }\r\n          : tl\r\n      );\r\n    case \"SET_TODOLISTS\":\r\n      return action.payload.todos.map((tl) => {\r\n        return { ...tl, filter: \"All\", entityStatus: \"idle\" };\r\n      });\r\n    case \"CHANGE_ENTITY_STATUS\":\r\n      return state.map((tl) =>\r\n        tl.id === action.payload.id\r\n          ? { ...tl, entityStatus: action.payload.entityStatus }\r\n          : tl\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Action creators\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n  return {\r\n    type: \"ADD_TODOLIST\",\r\n    payload: {\r\n      todolist,\r\n    },\r\n  } as const;\r\n};\r\nexport const removeTodolistAC = (todoListId: string) => {\r\n  return {\r\n    type: \"REMOVE_TODOLIST\",\r\n    payload: {\r\n      todoListId,\r\n    },\r\n  } as const;\r\n};\r\nexport const changeFilterAC = (value: FilterValuesType, todolistId: string) => {\r\n  return {\r\n    type: \"CHANGE_FILTER\",\r\n    payload: {\r\n      value,\r\n      todolistId,\r\n    },\r\n  } as const;\r\n};\r\nexport const updateTodolistTitleAC = (todolistId: string, title: string) => {\r\n  return {\r\n    type: \"UPDATE_TODOLIST_TITLE\",\r\n    payload: {\r\n      todolistId,\r\n      title,\r\n    },\r\n  } as const;\r\n};\r\nexport const setTodolistsAC = (todos: TodolistType[]) => {\r\n  return {\r\n    type: \"SET_TODOLISTS\",\r\n    payload: {\r\n      todos,\r\n    },\r\n  } as const;\r\n};\r\nexport const chandeTodolistEntityStatusAC = (\r\n  id: string,\r\n  entityStatus: RequestStatusType\r\n) => {\r\n  return {\r\n    type: \"CHANGE_ENTITY_STATUS\",\r\n    payload: {\r\n      id,\r\n      entityStatus,\r\n    },\r\n  } as const;\r\n};\r\n\r\n// Thunks\r\n\r\nexport const fetchTodolistsThunk = (): ThunkType => (dispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.getTodolists().then((res) => {\r\n    dispatch(setAppStatusAC(\"succeeded\"));\r\n    dispatch(setTodolistsAC(res.data));\r\n  });\r\n};\r\n\r\nexport const removeTodolistThunk = (todolistId: string): ThunkType => (\r\n  dispatch\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  dispatch(chandeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n  todolistsAPI.deleteTodolist(todolistId).then((res) => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n      dispatch(removeTodolistAC(todolistId));\r\n    } else {\r\n      if (res.data.messages.length) {\r\n        dispatch(setAppErrorAC(res.data.messages[0]));\r\n      } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"));\r\n      }\r\n      dispatch(setAppStatusAC(\"failed\"));\r\n    }\r\n  });\r\n};\r\n\r\nexport const addTodolistsThunk = (title: string): ThunkType => (dispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.postTodolist(title).then((res) => {\r\n    if (res.data.resultCode == 0) {\r\n      dispatch(addTodolistAC(res.data.data.item));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    } else {\r\n      if (res.data.messages.length) {\r\n        dispatch(setAppErrorAC(res.data.messages[0]));\r\n      } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"));\r\n      }\r\n      dispatch(setAppStatusAC(\"failed\"));\r\n    }\r\n  });\r\n};\r\n\r\nexport const updateTodolistTitleThunk = (\r\n  todolistId: string,\r\n  title: string\r\n): ThunkType => (dispatch) => {\r\n  todolistsAPI.updateTodolist(todolistId, title).then((res) => {\r\n    dispatch(updateTodolistTitleAC(todolistId, title));\r\n  });\r\n};\r\n\r\n// Types\r\nexport type ActionTodolistsTypes =\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof changeFilterAC>\r\n  | ReturnType<typeof updateTodolistTitleAC>\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof chandeTodolistEntityStatusAC>;\r\n\r\nexport type SetTodosType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodoListEntityType = TodolistType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\nexport type FilterValuesType = \"All\" | \"Completed\" | \"Active\";\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk, { ThunkAction } from \"redux-thunk\";\r\nimport {\r\n  ActionTasksTypes,\r\n  tasksReducer,\r\n} from \"../Features/Todolists/tasksReducer\";\r\nimport {\r\n  ActionTodolistsTypes,\r\n  todolistsReducer,\r\n} from \"../Features/Todolists/todolistsReducer\";\r\nimport { ActionAppTypes, appReducer } from \"./appReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type ThunkType = ThunkAction<\r\n  void,\r\n  AppRootStateType,\r\n  unknown,\r\n  AppActionsType\r\n>;\r\n// All action types\r\nexport type AppActionsType =\r\n  | ActionTasksTypes\r\n  | ActionTodolistsTypes\r\n  | ActionAppTypes;\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport styles from \"./AddItem.module.scss\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n  callback: (title: string) => void;\r\n};\r\nexport const AddItem: React.FC<PropsType> = React.memo(({ callback }) => {\r\n  const [newTaskTitle, setNewTaskTitle] = useState<string>(\"\");\r\n  const [error, setError] = useState<boolean>(false);\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setNewTaskTitle(e.currentTarget.value);\r\n    setError(false);\r\n  };\r\n\r\n  const onClickHandler = () => {\r\n    if (newTaskTitle.trim() !== \"\") {\r\n      callback(newTaskTitle.trim());\r\n      setNewTaskTitle(\"\");\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error) {\r\n      setError(false);\r\n    }\r\n\r\n    if (e.key === \"Enter\") {\r\n      onClickHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <TextField\r\n        className={styles.textField}\r\n        variant=\"outlined\"\r\n        error={error}\r\n        value={newTaskTitle}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label=\"Title\"\r\n        helperText={error}\r\n      />\r\n      <IconButton\r\n        color=\"primary\"\r\n        className={styles.btnAdd}\r\n        onClick={onClickHandler}\r\n      >\r\n        <AddBox />\r\n      </IconButton>\r\n      {error && (\r\n        <span className={error ? styles.errorMessage : \"\"}>\r\n          \"Title is required!\"\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   FormControl,\r\n//   IconButton,\r\n//   TextField,\r\n// } from \"@material-ui/core\";\r\n// import { AddBox } from \"@material-ui/icons\";\r\n\r\n// type AddItemFormPropsType = {\r\n//   addItem: (title: string) => void;\r\n// };\r\n\r\n// export const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n//   console.log(\"AddItemForm called\");\r\n\r\n//   let [title, setTitle] = useState(\"\");\r\n//   let [error, setError] = useState<string | null>(null);\r\n\r\n//   const addItem = () => {\r\n//     if (title.trim() !== \"\") {\r\n//       props.addItem(title);\r\n//       setTitle(\"\");\r\n//     } else {\r\n//       setError(\"Title is required\");\r\n//     }\r\n//   };\r\n\r\n//   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     setTitle(e.currentTarget.value);\r\n//   };\r\n\r\n//   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//     if (error !== null) {\r\n//       setError(null);\r\n//     }\r\n//     if (e.charCode === 13) {\r\n//       addItem();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <TextField\r\n//         variant=\"outlined\"\r\n//         error={!!error}\r\n//         value={title}\r\n//         onChange={onChangeHandler}\r\n//         onKeyPress={onKeyPressHandler}\r\n//         label=\"Title\"\r\n//         helperText={error}\r\n//       />\r\n//       <IconButton color=\"primary\" onClick={addItem}>\r\n//         <AddBox />\r\n//       </IconButton>\r\n//     </div>\r\n//   );\r\n// });\r\n","import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport styles from \"./EditableSpan.module.scss\";\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  changeTaskTitle: (title: string) => void;\r\n  className?: string;\r\n};\r\n\r\nexport const EditableSpan: React.FC<PropsType> = React.memo(\r\n  ({ title, changeTaskTitle, className }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [value, setValue] = useState<string>(title);\r\n\r\n    const onEditMode = () => {\r\n      setEditMode(true);\r\n    };\r\n\r\n    const offEditMode = () => {\r\n      setEditMode(false);\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      const newValue = e.currentTarget.value;\r\n      if (value) {\r\n        changeTaskTitle(newValue);\r\n      }\r\n      setValue(newValue);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === \"Enter\") {\r\n        setEditMode(false);\r\n      }\r\n    };\r\n\r\n    return editMode ? (\r\n      <TextField\r\n        className={styles.input}\r\n        autoFocus\r\n        onChange={onChangeHandler}\r\n        onBlur={offEditMode}\r\n        value={value}\r\n        onKeyPress={onKeyPressHandler}\r\n      />\r\n    ) : (\r\n      <span className={className} onDoubleClick={onEditMode}>\r\n        {title}\r\n      </span>\r\n    );\r\n  }\r\n);\r\n","import React, { ChangeEvent, useCallback } from \"react\";\r\nimport { EditableSpan } from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport styles from \"./Task.module.scss\";\r\nimport { TaskStatuses, TaskType } from \"../../../../api/todolistsAPI\";\r\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n  changeTaskTitle: (taskId: string, title: string, todoListId: string) => void;\r\n  removeTask: (id: string, todoListId: string) => void;\r\n  checkboxChange: (\r\n    taskId: string,\r\n    status: TaskStatuses,\r\n    todoListId: string\r\n  ) => void;\r\n  task: TaskType;\r\n  todolistId: string;\r\n};\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n  const {\r\n    removeTask,\r\n    checkboxChange,\r\n    changeTaskTitle,\r\n    task,\r\n    todolistId,\r\n  } = props;\r\n\r\n  const onRemoveHandler = () => {\r\n    removeTask(task.id, todolistId);\r\n  };\r\n\r\n  const onCheckboxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    checkboxChange(\r\n      task.id,\r\n      e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New,\r\n      todolistId\r\n    );\r\n  };\r\n\r\n  const changeTaskTitleHandler = useCallback(\r\n    (title: string) => {\r\n      changeTaskTitle(task.id, title, todolistId);\r\n    },\r\n    [changeTaskTitle, task.id, todolistId]\r\n  );\r\n  return (\r\n    <li className={task.status === TaskStatuses.Completed ? styles.isDone : \"\"}>\r\n      <div className={styles.wrapper}>\r\n        <Checkbox\r\n          checked={task.status === TaskStatuses.Completed}\r\n          onChange={onCheckboxChangeHandler}\r\n        />\r\n\r\n        <EditableSpan\r\n          className={styles.span}\r\n          changeTaskTitle={changeTaskTitleHandler}\r\n          title={task.title}\r\n        />\r\n\r\n        <IconButton className={styles.trash} onClick={onRemoveHandler}>\r\n          <Delete />\r\n        </IconButton>\r\n      </div>\r\n    </li>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\n// import { Button } from \"../../../Components/Buttons/Button\";\r\nimport { AddItem } from \"../../../Components/AddItem/AddItem\";\r\nimport styles from \"./Todolist.module.scss\";\r\nimport { EditableSpan } from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport { Task } from \"./Task/Task\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolistsAPI\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FilterValuesType } from \"../todolistsReducer\";\r\nimport { fetchTasksThunk } from \"../tasksReducer\";\r\nimport { RequestStatusType } from \"../../../App/appReducer\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  removeTask: (id: string, todoListId: string) => void;\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void;\r\n  addTask: (title: string, todoListId: string) => void;\r\n  checkboxChange: (\r\n    taskId: string,\r\n    status: TaskStatuses,\r\n    todoListId: string\r\n  ) => void;\r\n  filter: FilterValuesType;\r\n  id: string;\r\n  removeTodoList: (todoListId: string) => void;\r\n  changeTaskTitle: (taskId: string, title: string, todoListId: string) => void;\r\n  changeTodoListTitle: (todoListId: string, title: string) => void;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((props) => {\r\n  const {\r\n    title,\r\n    tasks,\r\n    removeTask,\r\n    changeFilter,\r\n    addTask,\r\n    checkboxChange,\r\n    filter,\r\n    id,\r\n    removeTodoList,\r\n    changeTaskTitle,\r\n    changeTodoListTitle,\r\n    entityStatus,\r\n  } = props;\r\n  const dispatch = useDispatch();\r\n  const onAllClickHandler = useCallback(() => changeFilter(\"All\", id), [\r\n    changeFilter,\r\n    id,\r\n  ]);\r\n\r\n  const onActiveClickHandler = useCallback(() => changeFilter(\"Active\", id), [\r\n    changeFilter,\r\n    id,\r\n  ]);\r\n\r\n  const onCompletedClickHandler = useCallback(\r\n    () => changeFilter(\"Completed\", id),\r\n    [changeFilter, id]\r\n  );\r\n\r\n  const onClickHandler = () => removeTodoList(id);\r\n\r\n  const addTaskItem = useCallback(\r\n    (title: string) => {\r\n      addTask(title, id);\r\n    },\r\n    [addTask, id]\r\n  );\r\n\r\n  const changeTodolistTitleHandler = useCallback(\r\n    (title: string) => {\r\n      changeTodoListTitle(id, title);\r\n    },\r\n    [changeTodoListTitle, id]\r\n  );\r\n\r\n  let tasksForTodoList = tasks;\r\n  if (filter === \"Completed\") {\r\n    tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.Completed);\r\n  }\r\n  if (filter === \"Active\") {\r\n    tasksForTodoList = tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksThunk(id));\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          className={styles.span}\r\n          title={title}\r\n          changeTaskTitle={changeTodolistTitleHandler}\r\n        />\r\n      </h3>\r\n      <AddItem callback={addTaskItem} />\r\n      <div>\r\n        {tasksForTodoList.map((t) => (\r\n          <Task\r\n            changeTaskTitle={changeTaskTitle}\r\n            removeTask={removeTask}\r\n            checkboxChange={checkboxChange}\r\n            task={t}\r\n            todolistId={id}\r\n            key={t.id}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className={styles.btnsWrapper}>\r\n        <Button\r\n          className={styles.btn}\r\n          variant={filter === \"All\" ? \"contained\" : \"text\"}\r\n          onClick={onAllClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          className={styles.btn}\r\n          variant={filter === \"Active\" ? \"contained\" : \"text\"}\r\n          onClick={onActiveClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          className={styles.btn}\r\n          variant={filter === \"Completed\" ? \"contained\" : \"text\"}\r\n          onClick={onCompletedClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Completed\r\n        </Button>\r\n        <Button\r\n          className={styles.deleteBtn}\r\n          disabled={entityStatus === \"loading\"}\r\n          onClick={onClickHandler}\r\n        >\r\n          Remove all\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../api/todolistsAPI\";\r\nimport { AddItem } from \"../../Components/AddItem/AddItem\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport { AppRootStateType } from \"../../App/store\";\r\nimport { addTaskThunk, removeTaskThunk, updateTaskThunk } from \"./tasksReducer\";\r\nimport {\r\n  addTodolistsThunk,\r\n  changeFilterAC,\r\n  fetchTodolistsThunk,\r\n  FilterValuesType,\r\n  removeTodolistThunk,\r\n  TodoListEntityType,\r\n  updateTodolistTitleThunk,\r\n} from \"./todolistsReducer\";\r\nimport styles from \"./TodolistsList.module.scss\";\r\n\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\nexport const TodolistsList = () => {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector<AppRootStateType, TaskStateType>(\r\n    (state) => state.tasks\r\n  );\r\n  const todolists = useSelector<AppRootStateType, TodoListEntityType[]>(\r\n    (state) => state.todolists\r\n  );\r\n\r\n  // TDlists functions\r\n  const changeFilter = useCallback(\r\n    (value: FilterValuesType, todoListId: string) => {\r\n      const action = changeFilterAC(value, todoListId);\r\n      dispatch(action);\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTodoList = useCallback(\r\n    (todoListId: string) => {\r\n      dispatch(removeTodolistThunk(todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistsThunk(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodolistsThunk());\r\n  }, []);\r\n\r\n  const changeTodoListTitle = useCallback(\r\n    (todolistId: string, title: string) => {\r\n      dispatch(updateTodolistTitleThunk(todolistId, title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  //Tasks functions\r\n\r\n  const addTask = useCallback(\r\n    (title: string, todoListId: string) => {\r\n      dispatch(addTaskThunk(todoListId, title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const removeTask = useCallback(\r\n    (id: string, todoListId: string) => {\r\n      dispatch(removeTaskThunk(id, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const checkboxChange = useCallback(\r\n    (taskId: string, status: TaskStatuses, todoListId: string) => {\r\n      dispatch(updateTaskThunk(taskId, { status }, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const changeTaskTitle = useCallback(\r\n    (taskId: string, title: string, todoListId: string) => {\r\n      dispatch(updateTaskThunk(taskId, { title }, todoListId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid container className={styles.addItem}>\r\n        <AddItem callback={addTodolist} />\r\n      </Grid>\r\n\r\n      <Grid container spacing={0}>\r\n        {todolists.map((tl) => {\r\n          let tasksForTodoList = tasks[tl.id];\r\n\r\n          return (\r\n            <Grid key={tl.id}>\r\n              <Paper\r\n                // style={{ padding: \"1rem\", backgroundColor: \"#9DDAC6\" }}\r\n                elevation={0}\r\n                variant=\"outlined\"\r\n                className={styles.paper}\r\n              >\r\n                <Todolist\r\n                  key={tl.id}\r\n                  entityStatus={tl.entityStatus}\r\n                  id={tl.id}\r\n                  filter={tl.filter}\r\n                  title={tl.title}\r\n                  tasks={tasksForTodoList}\r\n                  addTask={addTask}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  checkboxChange={checkboxChange}\r\n                  removeTodoList={removeTodoList}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\n// Types\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { AppRootStateType } from \"../../App/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setAppErrorAC } from \"../../App/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  // const [open, setOpen] = React.useState(true);\r\n  const error = useSelector<AppRootStateType, null | string>(\r\n    (state) => state.app.error\r\n  );\r\n  const dispatch = useDispatch();\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={error !== null}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./App.module.scss\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { TodolistsList } from \"../Features/Todolists/TodolistsList \";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./store\";\r\nimport { RequestStatusType } from \"./appReducer\";\r\nimport { ErrorSnackbar } from \"../Components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nfunction App() {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={styles.navbar}>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">TodoShka</Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n        {status === \"loading\" && <LinearProgress color=\"secondary\" />}\r\n      </AppBar>\r\n      <Container className={styles.container} maxWidth=\"xl\">\r\n        <TodolistsList />\r\n      </Container>\r\n      <ErrorSnackbar />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport { store } from \"./App/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Todolist_header__P1QI6\",\"btnsWrapper\":\"Todolist_btnsWrapper__s30fF\",\"deleteBtn\":\"Todolist_deleteBtn__GpHnW\",\"btn\":\"Todolist_btn__6WOk9\",\"span\":\"Todolist_span__1ql2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"AddItem_errorMessage__1R9-_\",\"textField\":\"AddItem_textField__VQDjl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trash\":\"Task_trash__2YWpi\",\"wrapper\":\"Task_wrapper__1bcWt\",\"span\":\"Task_span__Q0klS\",\"isDone\":\"Task_isDone__3dO0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"App_navbar__3XP-h\",\"container\":\"App_container__yxLVC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"TodolistsList_paper__2p22s\",\"addItem\":\"TodolistsList_addItem__3-WbB\"};"],"sourceRoot":""}